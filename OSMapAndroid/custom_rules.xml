<?xml version="1.0" encoding="UTF-8"?>
<project name="custom_rules" default="debug">
    <import file="custom_shared_rules.xml" />

    <target name="clean" depends="android_rules.clean,custom_shared_rules.clean,-javadoc-dir">
        <delete dir="${out.javadoc.dir}"/>
    </target>

    <target name="-javadoc-dir">
        <property name="out.javadoc.dir" location="doc" />
    </target>

    <target name="javadoc" depends="-pre-build, -build-setup, -javadoc-dir">
        <javadoc
            access="protected"
            author="false"
            destdir="${out.javadoc.dir}"
            nodeprecated="false"
            nodeprecatedlist="false"
            noindex="false"
            nonavbar="false"
            notree="false"
            encoding="${java.encoding}"
            packagenames="uk.co.ordnancesurvey.android.maps"
            source="${java.source}"
            splitindex="true"
            use="true"
            version="true" >

            <classpath refid="project.all.jars.path" />
            <classpath refid="tested.project.classpath" />

            <bootclasspath refid="project.target.class.path" />

            <sourcepath path="${source.absolute.dir}" />
            <!--<sourcepath path="${gen.absolute.dir}" />-->

            <!-- Generate links to the Android SDK docs; offline="true" avoids fetching the package list over HTTP. -->
            <!-- You must have "Documentation for Android SDK" installed (run the "Android SDK Manager"). -->
            <link href="http://developer.android.com/reference/" offline="true" packagelistLoc="${sdk.dir}/docs/reference/" />
        </javadoc>
    </target>

    <!-- Taken from Android's build.xml -->
    <target name="-obfuscate">
        <property name="preobfuscate.jar.file" value="${out.library.jar.file}" />
        <property name="obfuscated.jar.file" value="${out.absolute.dir}/OSMapAndroid.jar" />
        <delete file="${obfuscated.jar.file}"/>

        <!-- Always use ProGuard, but do not obfuscate "debug" builds. -->
        <property name="proguard.obfuscate" value="${proguard.enabled}" />
        <property name="proguard.actually.enabled" value="yes"/>
        <if condition="${proguard.actually.enabled}">
            <then>
                <property name="obfuscate.absolute.dir" location="${out.absolute.dir}/proguard" />
                <!-- input for dex will be proguard's output -->
                <property name="out.dex.input.absolute.dir" value="${obfuscated.jar.file}" />

                <!-- Add Proguard Tasks -->
                <property name="proguard.jar" location="${android.tools.dir}/proguard/lib/proguard.jar" />
                <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.jar}" />

                <!-- Set the android classpath Path object into a single property. It'll be
                     all the jar files separated by a platform path-separator.
                     Each path must be quoted if it contains spaces.
                -->
                <path id="project.targetandlibs.class.path">
                    <path refid="project.target.class.path" />
                    <path refid="project.all.jars.path" />
                </path>
                <pathconvert property="project.target.classpath.value" refid="project.targetandlibs.class.path">
                    <firstmatchmapper>
                        <regexpmapper from='^([^ ]*)( .*)$$' to='"\1\2"'/>
                        <identitymapper/>
                    </firstmatchmapper>
                </pathconvert>

                <!-- Build a path object with all the jar files that must be obfuscated.
                     This include the project compiled source code and any 3rd party jar
                     files. -->
                <path id="project.all.classes.path">
                    <pathelement location="${preobfuscate.jar.file}" />
                </path>
                <!-- Set the project jar files Path object into a single property. It'll be
                     all the jar files separated by a platform path-separator.
                     Each path must be quoted if it contains spaces.
                -->
                <pathconvert property="project.all.classes.value" refid="project.all.classes.path">
                    <firstmatchmapper>
                        <regexpmapper from='^([^ ]*)( .*)$$' to='"\1\2"'/>
                        <identitymapper/>
                    </firstmatchmapper>
                </pathconvert>

                <!-- Turn the path property ${proguard.config} from an A:B:C property
                     into a series of includes: -include A -include B -include C
                     suitable for processing by the ProGuard task. Note - this does
                     not include the leading '-include "' or the closing '"'; those
                     are added under the <proguard> call below.
                -->
                <path id="proguard.configpath">
                    <pathelement path="${proguard.config}"/>
                </path>
                <pathconvert pathsep='" -include "' property="proguard.configcmd" refid="proguard.configpath"/>

                <mkdir   dir="${obfuscate.absolute.dir}" />
                <proguard obfuscate="${proguard.obfuscate}">
                    -include      "${proguard.configcmd}"
                    -include      "${out.absolute.dir}/proguard.txt"
                    -injars       ${project.all.classes.value}
                    -outjars      "${obfuscated.jar.file}"
                    -libraryjars  ${project.target.classpath.value}
                    -dump         "${obfuscate.absolute.dir}/dump.txt"
                    -printseeds   "${obfuscate.absolute.dir}/seeds.txt"
                    -printusage   "${obfuscate.absolute.dir}/usage.txt"
                    -printmapping "${obfuscate.absolute.dir}/mapping.txt"
                </proguard>
            </then>
            <else>
                <copy file="${preobfuscate.jar.file}" tofile="${obfuscated.jar.file}" />
            </else>
        </if>
    </target>
</project>
